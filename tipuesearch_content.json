{"pages":[{"text":"I'm just exploring options, and I'm no pro. Here's a short list of what I've found, and my notes (if any) on them. PowDLL FullProf / WinPLOTR OpenBabel Fox (Free Objects for Crystallography) General Resources Strategies in Structure Determination from Powder Data SDPD Internet Course","tags":"crystallography","title":"Powder XRD Packages","loc":"http://bjmcculloch.github.io/powder-xrd-packages.html"},{"text":"This is pretty straightforward. The .vzs file you capture when taking the video for face indexing is just a zipfile. So, rename the file, unzip it, and use ffmpeg/mencoder to make a video . $ mkdir video ; cd video $ unzip ../crystal.vzs $ mencoder \"mf://*.jpg\" -mf fps = 30 -o crystal.avi -ovc copy This will open up fine in VLC, but if you need it to work in, say, MS Office, then you should use settings along these lines: $ mencoder \"mf://*.jpg\" -mf fps = 30 -o crystal.avi \\ -ovc lavc -lavcopts vcodec = msmpeg4v2:vbitrate = 8192 ffmpeg is also a good option, but MS Office doesn't support the output. $ ffmpeg -r 30 -b 8192k -i %03d.jpg crystal.avi Also, the page linked above says you have to convert to JPEGs for mencoder. This is no longer true. Also, if you do need to do the conversion, the listed command is far more complex than it needs to be. Use this instead: $ mogrify -format jpg *.png","tags":"crystallography","title":"Making Videos From Face Indexing Images","loc":"http://bjmcculloch.github.io/making-videos-from-face-indexing-images.html"},{"text":"I like to use Mercury to generate POV-Ray files, but this should work with any POV-Ray scene. #include \"math.inc\" #macro ccdc_orthographic_camera( camera_position ) camera { orthographic // In orthographic view, making 'angle' smaller makes the structure bigger, // and vice versa: angle 0.075 location camera_position sky <- 100 , 10000 , - 100 > up < 0 , 1 , 0 > right - x * ( image_width / image_height ) look_at < 0 , 0 , 0 > // rotate_view_for_animation() } #end #declare r = 23000; ccdc_orthographic_camera ( < r * ( clip ( cos ( 1.5 * pi * clock ), 0 , 1 ) + clip ( sin (( - 1 * pi ) + ( 1.5 * pi * clock )), 0 , 1 )), r * clip ( sin ( 1.5 * pi * clock ), 0 , 1 ), r * clip ( sin (( - 0.5 * pi ) + ( 1.5 * pi * clock )), 0 , 1 ) > )","tags":"crystallography","title":"Making POV-Ray Orbit A Crystal Structure","loc":"http://bjmcculloch.github.io/making-pov-ray-orbit-a-crystal-structure.html"},{"text":"TeX class for writing a Ph.D. thesis according to TAMU's Thesis Office specifications. I take advantage of both LuaLaTeX and the memoir class. The code is incomplete and imperfect, here's a summary of known non-features... (this list has shrunk considerably since I started :) Parts of it are somewhat rigid, and would require customization for people other than me. I assume the committee chair is a Dr. The thesis office hasn't looked at any of the product documents. :) I intend to show them my proposal, based on this template, to see if it cuts the mustard. Cool features include: Margin notes which can be switched on/off (sort of a note to self feature) Hyperref is supported throught, but not required. Automagic links figures/tables/etc. references to the original location in the document. The \\tref command, which automagically inserts both the kind of content as well as page information for references through judicous use of the varioref package's macros (e.g. \\tref{bigPicture} \u2192 \"Figure 3.2 on the following page\" or \\tref{incomeTaxBrackets} \u2192 \"Table 2.8 on page 38\") The PDF page numbers actually correspond to the document page numbers (i.e. page 1 in the PDF menubar actually means page 1 of the main text, not the frontmatter stuff, which would appear as i, ii, iii, etc.) The use of the memoir class means that you can prepare a document fully compatible with the thesis office's specifications, then easily modify the layout macros to prepare a beautifully typeset document you'd actually want to have bound to show your mother. (e.g. you'd switch the linespacing to singlespace, print on both sides of a sheet of paper, use reasonable margins and font sizes, modify headers and footers, change appearance of new chapters, include epigraphs, etc. Basically, it could look like a legitimate pulished work, instead of a typewriter-like throwback to 1970... with very little effort.)","tags":"LaTeX","title":"TAMU Thesis Class","loc":"http://bjmcculloch.github.io/tamu-thesis-class.html"},{"text":"Note: I posted this elsewhere on the 'net some time ago, but I'm putting it here to make it easier for me to find\u2026 So, I am currently running Ubuntu 10.10 (just installed last night), and have the ability to both use unicode entry with the Ctrl+Shift+U sequence, as well as custom compose keys. This is something I discovered some time ago, and only recently revisited due to switching from Debian to Ubuntu. I don't remember why this works anymore, but anyhow\u2026 1) Install the uim-gtk2.0 package (and uim-qt, if you want). 2) That's basically it. \u30c4 You can then set your compose keys and whatnot in the System\u2192Preferences\u2192Keyboard menu. There's also another way to setup your .XCompose file; you can source the global file, then add your own definitions below that, so you have a more compact compose file (though it becomes subject to upstream's modifications, which may or may not be something you want). Anyway, mine looks something like this: # Load the defaults first, so that you can overwrite sequences you don't like include \"/usr/share/X11/locale/en_US.UTF-8/Compose\" # Custom additions: Typography <Multi_key> <period> <period> <period> : \"\u2026\" U2026 # HORIZONTAL ELLIPSIS <Multi_key> <minus> <less> : \"\u2190\" leftarrow # LEFTWARDS ARROW <Multi_key> <bar> <asciicircum> : \"\u2191\" uparrow # UPWARDS ARROW <Multi_key> <minus> <greater> : \"\u2192\" rightarrow # RIGHTWARDS ARROW <Multi_key> <bar> <v> : \"\u2193\" downarrow # DOWNWARDS ARROW <Multi_key> <less> <minus> <greater> : \"\u2194\" U2194 # LEFT RIGHT ARROW # etc. etc. UPDATE: I just upgraded to Ubuntu 11.04, and the compose keys got broken. Basically, somebody rearranged the keyboard preferences, and you can't use them to set the compose keys anymore (among other things). The option is probably available graphically, but until I find it, you can revert to the old school way of doing it. Namely, setxkbmap -option compose:ralt setxkbmap -option ctrl:nocaps The first of these will set the compose key to the Right Alt key, which is what I use. The second command sets the Caps Lock key to function just like another Ctrl key. Put the appropriate lines into your ~/.profile, and you're up an running again!","tags":"typography","title":"Unicode Input","loc":"http://bjmcculloch.github.io/unicode-input.html"},{"text":"I've had this idea for quite some time now: I would like to be able to incorporate interactive 3D figures of crystallographic models in my PDFs. It started when I was reading about Asymptote , a vector graphics package with the ability to embed 3D models in PDFs. I set out to write a program/script to turn a CIF into Asymptote code. Fortunately, I've since run across some other people with similar ambitions , so I'm using their experience as guidance, and I will be documenting my ideas here. File Formats CIF The standard format for small-molecule crystallographic models, this is the universal starting point mmCIF A standard format for macromolecular crystallographic models. This is a reasonable intermediate, because there appear to be a swath of tools available to convert this into other useful formats. PDB Another, very common, format for macromolecular models. Can be as simple as a list of XYZ coordinates, or can include more details, such as unit cell dimensions and thermal displacement parameters. Very human-readable, simple text based system. VRML / X3D The original web standard for 3D content. Has fallen somewhat by the wayside on the web, but has become a catch-all file format for a 3D programs. The proposed replacement for VRML, X3D is XML-based. X3D/VRML Resources U3D U3D is also XML-based, and has been around longer. I don't know why it's not the \"new VRML\" format. This is the format Adobe PDF readers expect to see for embedded 3D objects. ( U3D File Format Specification ) PDF Of course, this is the standard document exchange format. This is the target system which we would like to embed out graphics in. Programs PyMOL jMOL Mercury Mercury is capable of converting CIF files to PDB files, while retaining the data pertinent to an accurate 3D model (a, b, c, \u03b1, \u03b2, \u03b3, Uij, etc\u2026)! Xj3D Asymptote LaTeX Adobe Reader sf-convert maxit MeshLab Meshlab can convert VRML or X3D to U3D, which is what Adobe uses for PDFs. DRAWxtl DRAWxtl can import a CIF and export a VRML file with all the thermal ellipsoids intact! It's a bit clunky to use, though. Diamond Diamond can also import CIFs and export VRML with all thermal ellipsoids intact! It's commercial software, but available in a demo form that does not restrict your ability to export VRML. Probably the best COTS solution. X3D-Edit X3D-Edit is usable as a VRML/X3D conversion tool, as well as a validator. It's a program written by the man who literally wrote the book on X3D. Workflows PyMOL \u2192 MeshLab \u2192 movie15 This doesn't work because PyMOL, for whatever reason, will not save the ellipsoids in the exported VRML document (or in POV-Ray documents, either). Also, MeshLab doesn't like the VRML format that PyMOL makes, anyway. Xj3D, on the other hand, has no issues with opening/converting these files. However, even if you use Xj3D to convert from VRML to X3D, MeshLab will still complain. Convert from CIF to VRML Open the CIF in PyMOL show ellipsoids save filename.wrl Convert from VRML to U3D Open the VRML 2 (.wrl) document in MeshLab File \u2192 Save As\u2026 \u2192 U3D Embed the U3D document using the movie15 package ( concise instructions ) VTK \u2192 MeshLab \u2192 movie15 Nearly identical to the above, but find an app that uses VTK to display a CIF. Mercury \u2192 POV-Ray \u2192 Custom Script This was one of my original ideas: use Mercury's ability to export POV-Ray scenes to generate an input file that can be readily translated into Asymptote code. Right now, this isn't looking so bad\u2026 CIF \u2192 PDB \u2192 VRML \u2192 U3D Use Mercury to convert from CIF to PDB. Make a (Python?) script to turn that into an VRML model. Then MeshLab can convert the VRML to U3D. I'm guessing that VRML will likely be easier to implement, but X3D or even U3D could probably be implemented as well. This appears to be the route of choice.","tags":"crystallography","title":"3D Models in PDFs","loc":"http://bjmcculloch.github.io/3d-models-in-pdfs.html"}]}